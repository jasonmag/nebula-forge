# Name of your application. Used to uniquely configure containers.
service: jasonmag

# Name of the container image.
image: jasonmaglangit/nebula-forge

# Deploy to these servers.
servers:
  web:
    hosts:
      - jasonmag.com
    labels:
      traefik.http.routers.jasonmag.rule: Host(`jasonmag.com`,`www.jasonmag.com`,`nebulaforge.jasonmag.com`)
      traefik.http.routers.jasonmag_secure.entrypoints: websecure
      traefik.http.routers.jasonmag_secure.rule: Host(`jasonmag.com`,`www.jasonmag.com`,`nebulaforge.jasonmag.com`)
      traefik.http.routers.jasonmag_secure.tls: true
      traefik.http.routers.jasonmag_secure.tls.certresolver: letsencrypt

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: jasonmaglangit

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  secret:
    - RAILS_MASTER_KEY

# Use a different ssh user than root
ssh:
  user: ubuntu

traefik:
  options:
    publish:
      - "443:443"
    volume:
    - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    certificatesResolvers.letsencrypt.acme.email: "jasonmaglangit@gmail.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

volumes:
  - "storage:/rails/storage"
